/*
 * TVDB API V4
 * Documentation of [TheTVDB](https://thetvdb.com/) API V4. All related information is linked from our [Github repo](https://github.com/thetvdb/v4-api). You might also want to use our [Postman collection] (https://www.getpostman.com/collections/7a9397ce69ff246f74d0) ## Authentication 1. Use the /login endpoint and provide your API key as \"apikey\". If you have a user-supported key, also provide your subscriber PIN as \"pin\". Otherwise completely remove \"pin\" from your call. 2. Executing this call will provide you with a bearer token, which is valid for 1 month. 3. Provide your bearer token for subsequent API calls by clicking Authorize below or including in the header of all direct API calls: `Authorization: Bearer [your-token]`  ## Notes 1. \"score\" is a field across almost all entities.  We generate scores for different types of entities in various ways, so no assumptions should be made about the meaning of this value.  It is simply used to hint at relative popularity for sorting purposes. 
 *
 * OpenAPI spec version: 4.7.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amilesend.tvdb.client.api;

import com.amilesend.tvdb.client.ApiCallback;
import com.amilesend.tvdb.client.ApiClient;
import com.amilesend.tvdb.client.ApiException;
import com.amilesend.tvdb.client.ApiResponse;
import com.amilesend.tvdb.client.Configuration;
import com.amilesend.tvdb.client.Pair;
import com.amilesend.tvdb.client.ProgressRequestBody;
import com.amilesend.tvdb.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.amilesend.tvdb.client.model.InlineResponse20039;
import com.amilesend.tvdb.client.model.InlineResponse20040;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient apiClient;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getSearchResults
     * @param query The primary search string, which can include the main title for a record including all translations and aliases. (optional)
     * @param q Alias of the \&quot;query\&quot; parameter.  Recommend using query instead as this field will eventually be deprecated. (optional)
     * @param type Restrict results to a specific entity type.  Can be movie, series, person, or company. (optional)
     * @param year Restrict results to a specific year. Currently only used for series and movies. (optional)
     * @param company Restrict results to a specific company (original network, production company, studio, etc).  As an example, \&quot;The Walking Dead\&quot; would have companies of \&quot;AMC\&quot;, \&quot;AMC+\&quot;, and \&quot;Disney+\&quot;. (optional)
     * @param country Restrict results to a specific country of origin. Should contain a 3 character country code. Currently only used for series and movies. (optional)
     * @param director Restrict results to a specific director.  Generally only used for movies.  Should include the full name of the director, such as \&quot;Steven Spielberg\&quot;. (optional)
     * @param language Restrict results to a specific primary language.  Should include the 3 character language code.  Currently only used for series and movies. (optional)
     * @param primaryType Restrict results to a specific type of company.  Should include the full name of the type of company, such as \&quot;Production Company\&quot;.  Only used for companies. (optional)
     * @param network Restrict results to a specific network.  Used for TV and TV movies, and functions the same as the company parameter with more specificity. (optional)
     * @param remoteId Search for a specific remote id.  Allows searching for an IMDB or EIDR id, for example. (optional)
     * @param offset Offset results. (optional)
     * @param limit Limit results. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSearchResultsCall(String query, String q, String type, BigDecimal year, String company, String country, String director, String language, String primaryType, String network, String remoteId, BigDecimal offset, BigDecimal limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (year != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("year", year));
        if (company != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("company", company));
        if (country != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("country", country));
        if (director != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("director", director));
        if (language != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("language", language));
        if (primaryType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("primaryType", primaryType));
        if (network != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("network", network));
        if (remoteId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("remote_id", remoteId));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchResultsValidateBeforeCall(String query, String q, String type, BigDecimal year, String company, String country, String director, String language, String primaryType, String network, String remoteId, BigDecimal offset, BigDecimal limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        okhttp3.Call call = getSearchResultsCall(query, q, type, year, company, country, director, language, primaryType, network, remoteId, offset, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Our search index includes series, movies, people, and companies. Search is limited to 5k results max.
     * @param query The primary search string, which can include the main title for a record including all translations and aliases. (optional)
     * @param q Alias of the \&quot;query\&quot; parameter.  Recommend using query instead as this field will eventually be deprecated. (optional)
     * @param type Restrict results to a specific entity type.  Can be movie, series, person, or company. (optional)
     * @param year Restrict results to a specific year. Currently only used for series and movies. (optional)
     * @param company Restrict results to a specific company (original network, production company, studio, etc).  As an example, \&quot;The Walking Dead\&quot; would have companies of \&quot;AMC\&quot;, \&quot;AMC+\&quot;, and \&quot;Disney+\&quot;. (optional)
     * @param country Restrict results to a specific country of origin. Should contain a 3 character country code. Currently only used for series and movies. (optional)
     * @param director Restrict results to a specific director.  Generally only used for movies.  Should include the full name of the director, such as \&quot;Steven Spielberg\&quot;. (optional)
     * @param language Restrict results to a specific primary language.  Should include the 3 character language code.  Currently only used for series and movies. (optional)
     * @param primaryType Restrict results to a specific type of company.  Should include the full name of the type of company, such as \&quot;Production Company\&quot;.  Only used for companies. (optional)
     * @param network Restrict results to a specific network.  Used for TV and TV movies, and functions the same as the company parameter with more specificity. (optional)
     * @param remoteId Search for a specific remote id.  Allows searching for an IMDB or EIDR id, for example. (optional)
     * @param offset Offset results. (optional)
     * @param limit Limit results. (optional)
     * @return InlineResponse20039
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20039 getSearchResults(String query, String q, String type, BigDecimal year, String company, String country, String director, String language, String primaryType, String network, String remoteId, BigDecimal offset, BigDecimal limit) throws ApiException {
        ApiResponse<InlineResponse20039> resp = getSearchResultsWithHttpInfo(query, q, type, year, company, country, director, language, primaryType, network, remoteId, offset, limit);
        return resp.getData();
    }

    /**
     * 
     * Our search index includes series, movies, people, and companies. Search is limited to 5k results max.
     * @param query The primary search string, which can include the main title for a record including all translations and aliases. (optional)
     * @param q Alias of the \&quot;query\&quot; parameter.  Recommend using query instead as this field will eventually be deprecated. (optional)
     * @param type Restrict results to a specific entity type.  Can be movie, series, person, or company. (optional)
     * @param year Restrict results to a specific year. Currently only used for series and movies. (optional)
     * @param company Restrict results to a specific company (original network, production company, studio, etc).  As an example, \&quot;The Walking Dead\&quot; would have companies of \&quot;AMC\&quot;, \&quot;AMC+\&quot;, and \&quot;Disney+\&quot;. (optional)
     * @param country Restrict results to a specific country of origin. Should contain a 3 character country code. Currently only used for series and movies. (optional)
     * @param director Restrict results to a specific director.  Generally only used for movies.  Should include the full name of the director, such as \&quot;Steven Spielberg\&quot;. (optional)
     * @param language Restrict results to a specific primary language.  Should include the 3 character language code.  Currently only used for series and movies. (optional)
     * @param primaryType Restrict results to a specific type of company.  Should include the full name of the type of company, such as \&quot;Production Company\&quot;.  Only used for companies. (optional)
     * @param network Restrict results to a specific network.  Used for TV and TV movies, and functions the same as the company parameter with more specificity. (optional)
     * @param remoteId Search for a specific remote id.  Allows searching for an IMDB or EIDR id, for example. (optional)
     * @param offset Offset results. (optional)
     * @param limit Limit results. (optional)
     * @return ApiResponse&lt;InlineResponse20039&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20039> getSearchResultsWithHttpInfo(String query, String q, String type, BigDecimal year, String company, String country, String director, String language, String primaryType, String network, String remoteId, BigDecimal offset, BigDecimal limit) throws ApiException {
        okhttp3.Call call = getSearchResultsValidateBeforeCall(query, q, type, year, company, country, director, language, primaryType, network, remoteId, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20039>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Our search index includes series, movies, people, and companies. Search is limited to 5k results max.
     * @param query The primary search string, which can include the main title for a record including all translations and aliases. (optional)
     * @param q Alias of the \&quot;query\&quot; parameter.  Recommend using query instead as this field will eventually be deprecated. (optional)
     * @param type Restrict results to a specific entity type.  Can be movie, series, person, or company. (optional)
     * @param year Restrict results to a specific year. Currently only used for series and movies. (optional)
     * @param company Restrict results to a specific company (original network, production company, studio, etc).  As an example, \&quot;The Walking Dead\&quot; would have companies of \&quot;AMC\&quot;, \&quot;AMC+\&quot;, and \&quot;Disney+\&quot;. (optional)
     * @param country Restrict results to a specific country of origin. Should contain a 3 character country code. Currently only used for series and movies. (optional)
     * @param director Restrict results to a specific director.  Generally only used for movies.  Should include the full name of the director, such as \&quot;Steven Spielberg\&quot;. (optional)
     * @param language Restrict results to a specific primary language.  Should include the 3 character language code.  Currently only used for series and movies. (optional)
     * @param primaryType Restrict results to a specific type of company.  Should include the full name of the type of company, such as \&quot;Production Company\&quot;.  Only used for companies. (optional)
     * @param network Restrict results to a specific network.  Used for TV and TV movies, and functions the same as the company parameter with more specificity. (optional)
     * @param remoteId Search for a specific remote id.  Allows searching for an IMDB or EIDR id, for example. (optional)
     * @param offset Offset results. (optional)
     * @param limit Limit results. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSearchResultsAsync(String query, String q, String type, BigDecimal year, String company, String country, String director, String language, String primaryType, String network, String remoteId, BigDecimal offset, BigDecimal limit, final ApiCallback<InlineResponse20039> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSearchResultsValidateBeforeCall(query, q, type, year, company, country, director, language, primaryType, network, remoteId, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20039>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSearchResultsByRemoteId
     * @param remoteId Search for a specific remote id.  Allows searching for an IMDB or EIDR id, for example. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSearchResultsByRemoteIdCall(String remoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/remoteid/{remoteId}"
            .replaceAll("\\{" + "remoteId" + "\\}", apiClient.escapeString(remoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchResultsByRemoteIdValidateBeforeCall(String remoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'remoteId' is set
        if (remoteId == null) {
            throw new ApiException("Missing the required parameter 'remoteId' when calling getSearchResultsByRemoteId(Async)");
        }

        okhttp3.Call call = getSearchResultsByRemoteIdCall(remoteId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Search a series, movie, people, episode, company or season by specific remote id and returns a base record for that entity.
     * @param remoteId Search for a specific remote id.  Allows searching for an IMDB or EIDR id, for example. (required)
     * @return InlineResponse20040
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20040 getSearchResultsByRemoteId(String remoteId) throws ApiException {
        ApiResponse<InlineResponse20040> resp = getSearchResultsByRemoteIdWithHttpInfo(remoteId);
        return resp.getData();
    }

    /**
     * 
     * Search a series, movie, people, episode, company or season by specific remote id and returns a base record for that entity.
     * @param remoteId Search for a specific remote id.  Allows searching for an IMDB or EIDR id, for example. (required)
     * @return ApiResponse&lt;InlineResponse20040&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20040> getSearchResultsByRemoteIdWithHttpInfo(String remoteId) throws ApiException {
        okhttp3.Call call = getSearchResultsByRemoteIdValidateBeforeCall(remoteId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20040>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search a series, movie, people, episode, company or season by specific remote id and returns a base record for that entity.
     * @param remoteId Search for a specific remote id.  Allows searching for an IMDB or EIDR id, for example. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSearchResultsByRemoteIdAsync(String remoteId, final ApiCallback<InlineResponse20040> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSearchResultsByRemoteIdValidateBeforeCall(remoteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20040>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
