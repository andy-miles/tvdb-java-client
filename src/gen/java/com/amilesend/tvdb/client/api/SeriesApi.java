/*
 * TVDB API V4
 * Documentation of [TheTVDB](https://thetvdb.com/) API V4. All related information is linked from our [Github repo](https://github.com/thetvdb/v4-api). You might also want to use our [Postman collection] (https://www.getpostman.com/collections/7a9397ce69ff246f74d0) ## Authentication 1. Use the /login endpoint and provide your API key as \"apikey\". If you have a user-supported key, also provide your subscriber PIN as \"pin\". Otherwise completely remove \"pin\" from your call. 2. Executing this call will provide you with a bearer token, which is valid for 1 month. 3. Provide your bearer token for subsequent API calls by clicking Authorize below or including in the header of all direct API calls: `Authorization: Bearer [your-token]`  ## Notes 1. \"score\" is a field across almost all entities.  We generate scores for different types of entities in various ways, so no assumptions should be made about the meaning of this value.  It is simply used to hint at relative popularity for sorting purposes. 
 *
 * OpenAPI spec version: 4.7.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amilesend.tvdb.client.api;

import com.amilesend.tvdb.client.ApiCallback;
import com.amilesend.tvdb.client.ApiClient;
import com.amilesend.tvdb.client.ApiException;
import com.amilesend.tvdb.client.ApiResponse;
import com.amilesend.tvdb.client.Configuration;
import com.amilesend.tvdb.client.Pair;
import com.amilesend.tvdb.client.ProgressRequestBody;
import com.amilesend.tvdb.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.amilesend.tvdb.client.model.InlineResponse20020;
import com.amilesend.tvdb.client.model.InlineResponse20045;
import com.amilesend.tvdb.client.model.InlineResponse20046;
import com.amilesend.tvdb.client.model.InlineResponse20047;
import com.amilesend.tvdb.client.model.InlineResponse20048;
import com.amilesend.tvdb.client.model.InlineResponse20049;
import com.amilesend.tvdb.client.model.InlineResponse20050;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SeriesApi {
    private ApiClient apiClient;

    public SeriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SeriesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAllSeries
     * @param page page number (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getAllSeriesCall(BigDecimal page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSeriesValidateBeforeCall(BigDecimal page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        okhttp3.Call call = getAllSeriesCall(page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * returns list of series base records
     * @param page page number (optional)
     * @return InlineResponse20045
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20045 getAllSeries(BigDecimal page) throws ApiException {
        ApiResponse<InlineResponse20045> resp = getAllSeriesWithHttpInfo(page);
        return resp.getData();
    }

    /**
     * 
     * returns list of series base records
     * @param page page number (optional)
     * @return ApiResponse&lt;InlineResponse20045&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20045> getAllSeriesWithHttpInfo(BigDecimal page) throws ApiException {
        okhttp3.Call call = getAllSeriesValidateBeforeCall(page, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20045>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * returns list of series base records
     * @param page page number (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getAllSeriesAsync(BigDecimal page, final ApiCallback<InlineResponse20045> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getAllSeriesValidateBeforeCall(page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20045>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSeriesArtworks
     * @param id id (required)
     * @param lang lang (optional)
     * @param type type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSeriesArtworksCall(BigDecimal id, String lang, Integer type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/artworks"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeriesArtworksValidateBeforeCall(BigDecimal id, String lang, Integer type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSeriesArtworks(Async)");
        }

        okhttp3.Call call = getSeriesArtworksCall(id, lang, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns series artworks base on language and type. &lt;br&gt; Note&amp;#58; Artwork type is an id that can be found using **_/artwork/types** endpoint.
     * @param id id (required)
     * @param lang lang (optional)
     * @param type type (optional)
     * @return InlineResponse20047
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20047 getSeriesArtworks(BigDecimal id, String lang, Integer type) throws ApiException {
        ApiResponse<InlineResponse20047> resp = getSeriesArtworksWithHttpInfo(id, lang, type);
        return resp.getData();
    }

    /**
     * 
     * Returns series artworks base on language and type. &lt;br&gt; Note&amp;#58; Artwork type is an id that can be found using **_/artwork/types** endpoint.
     * @param id id (required)
     * @param lang lang (optional)
     * @param type type (optional)
     * @return ApiResponse&lt;InlineResponse20047&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20047> getSeriesArtworksWithHttpInfo(BigDecimal id, String lang, Integer type) throws ApiException {
        okhttp3.Call call = getSeriesArtworksValidateBeforeCall(id, lang, type, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20047>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns series artworks base on language and type. &lt;br&gt; Note&amp;#58; Artwork type is an id that can be found using **_/artwork/types** endpoint.
     * @param id id (required)
     * @param lang lang (optional)
     * @param type type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSeriesArtworksAsync(BigDecimal id, String lang, Integer type, final ApiCallback<InlineResponse20047> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSeriesArtworksValidateBeforeCall(id, lang, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20047>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSeriesBase
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSeriesBaseCall(BigDecimal id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeriesBaseValidateBeforeCall(BigDecimal id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSeriesBase(Async)");
        }

        okhttp3.Call call = getSeriesBaseCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns series base record
     * @param id id (required)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 getSeriesBase(BigDecimal id) throws ApiException {
        ApiResponse<InlineResponse20046> resp = getSeriesBaseWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * Returns series base record
     * @param id id (required)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> getSeriesBaseWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call call = getSeriesBaseValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns series base record
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSeriesBaseAsync(BigDecimal id, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSeriesBaseValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSeriesBaseBySlug
     * @param slug slug (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSeriesBaseBySlugCall(String slug, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/slug/{slug}"
            .replaceAll("\\{" + "slug" + "\\}", apiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeriesBaseBySlugValidateBeforeCall(String slug, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling getSeriesBaseBySlug(Async)");
        }

        okhttp3.Call call = getSeriesBaseBySlugCall(slug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns series base record searched by slug
     * @param slug slug (required)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 getSeriesBaseBySlug(String slug) throws ApiException {
        ApiResponse<InlineResponse20046> resp = getSeriesBaseBySlugWithHttpInfo(slug);
        return resp.getData();
    }

    /**
     * 
     * Returns series base record searched by slug
     * @param slug slug (required)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> getSeriesBaseBySlugWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call call = getSeriesBaseBySlugValidateBeforeCall(slug, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns series base record searched by slug
     * @param slug slug (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSeriesBaseBySlugAsync(String slug, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSeriesBaseBySlugValidateBeforeCall(slug, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSeriesEpisodes
     * @param page  (required)
     * @param id id (required)
     * @param seasonType season-type (required)
     * @param season  (optional, default to 0)
     * @param episodeNumber  (optional, default to 0)
     * @param airDate airDate of the episode, format is yyyy-mm-dd (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSeriesEpisodesCall(Integer page, BigDecimal id, String seasonType, Integer season, Integer episodeNumber, String airDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/episodes/{season-type}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "season-type" + "\\}", apiClient.escapeString(seasonType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (season != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("season", season));
        if (episodeNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("episodeNumber", episodeNumber));
        if (airDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("airDate", airDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeriesEpisodesValidateBeforeCall(Integer page, BigDecimal id, String seasonType, Integer season, Integer episodeNumber, String airDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getSeriesEpisodes(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSeriesEpisodes(Async)");
        }
        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling getSeriesEpisodes(Async)");
        }

        okhttp3.Call call = getSeriesEpisodesCall(page, id, seasonType, season, episodeNumber, airDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns series episodes from the specified season type, default returns the episodes in the series default season type
     * @param page  (required)
     * @param id id (required)
     * @param seasonType season-type (required)
     * @param season  (optional, default to 0)
     * @param episodeNumber  (optional, default to 0)
     * @param airDate airDate of the episode, format is yyyy-mm-dd (optional)
     * @return InlineResponse20048
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20048 getSeriesEpisodes(Integer page, BigDecimal id, String seasonType, Integer season, Integer episodeNumber, String airDate) throws ApiException {
        ApiResponse<InlineResponse20048> resp = getSeriesEpisodesWithHttpInfo(page, id, seasonType, season, episodeNumber, airDate);
        return resp.getData();
    }

    /**
     * 
     * Returns series episodes from the specified season type, default returns the episodes in the series default season type
     * @param page  (required)
     * @param id id (required)
     * @param seasonType season-type (required)
     * @param season  (optional, default to 0)
     * @param episodeNumber  (optional, default to 0)
     * @param airDate airDate of the episode, format is yyyy-mm-dd (optional)
     * @return ApiResponse&lt;InlineResponse20048&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20048> getSeriesEpisodesWithHttpInfo(Integer page, BigDecimal id, String seasonType, Integer season, Integer episodeNumber, String airDate) throws ApiException {
        okhttp3.Call call = getSeriesEpisodesValidateBeforeCall(page, id, seasonType, season, episodeNumber, airDate, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20048>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns series episodes from the specified season type, default returns the episodes in the series default season type
     * @param page  (required)
     * @param id id (required)
     * @param seasonType season-type (required)
     * @param season  (optional, default to 0)
     * @param episodeNumber  (optional, default to 0)
     * @param airDate airDate of the episode, format is yyyy-mm-dd (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSeriesEpisodesAsync(Integer page, BigDecimal id, String seasonType, Integer season, Integer episodeNumber, String airDate, final ApiCallback<InlineResponse20048> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSeriesEpisodesValidateBeforeCall(page, id, seasonType, season, episodeNumber, airDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20048>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSeriesExtended
     * @param id id (required)
     * @param meta meta (optional)
     * @param _short reduce the payload and returns the short version of this record without characters and artworks (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSeriesExtendedCall(BigDecimal id, String meta, Boolean _short, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/extended"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (meta != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("meta", meta));
        if (_short != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("short", _short));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeriesExtendedValidateBeforeCall(BigDecimal id, String meta, Boolean _short, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSeriesExtended(Async)");
        }

        okhttp3.Call call = getSeriesExtendedCall(id, meta, _short, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns series extended record
     * @param id id (required)
     * @param meta meta (optional)
     * @param _short reduce the payload and returns the short version of this record without characters and artworks (optional)
     * @return InlineResponse20047
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20047 getSeriesExtended(BigDecimal id, String meta, Boolean _short) throws ApiException {
        ApiResponse<InlineResponse20047> resp = getSeriesExtendedWithHttpInfo(id, meta, _short);
        return resp.getData();
    }

    /**
     * 
     * Returns series extended record
     * @param id id (required)
     * @param meta meta (optional)
     * @param _short reduce the payload and returns the short version of this record without characters and artworks (optional)
     * @return ApiResponse&lt;InlineResponse20047&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20047> getSeriesExtendedWithHttpInfo(BigDecimal id, String meta, Boolean _short) throws ApiException {
        okhttp3.Call call = getSeriesExtendedValidateBeforeCall(id, meta, _short, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20047>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns series extended record
     * @param id id (required)
     * @param meta meta (optional)
     * @param _short reduce the payload and returns the short version of this record without characters and artworks (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSeriesExtendedAsync(BigDecimal id, String meta, Boolean _short, final ApiCallback<InlineResponse20047> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSeriesExtendedValidateBeforeCall(id, meta, _short, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20047>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSeriesFilter
     * @param country country of origin (required)
     * @param lang original language (required)
     * @param company production company (optional)
     * @param contentRating content rating id base on a country (optional)
     * @param genre Genre id. This id can be found using **_/genres** endpoint. (optional)
     * @param sort sort by results (optional)
     * @param sortType sort type ascending or descending (optional)
     * @param status status (optional)
     * @param year release year (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSeriesFilterCall(String country, String lang, BigDecimal company, BigDecimal contentRating, BigDecimal genre, String sort, String sortType, BigDecimal status, BigDecimal year, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (company != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("company", company));
        if (contentRating != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentRating", contentRating));
        if (country != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("country", country));
        if (genre != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("genre", genre));
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (sortType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortType", sortType));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (year != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("year", year));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeriesFilterValidateBeforeCall(String country, String lang, BigDecimal company, BigDecimal contentRating, BigDecimal genre, String sort, String sortType, BigDecimal status, BigDecimal year, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getSeriesFilter(Async)");
        }
        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling getSeriesFilter(Async)");
        }

        okhttp3.Call call = getSeriesFilterCall(country, lang, company, contentRating, genre, sort, sortType, status, year, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Search series based on filter parameters
     * @param country country of origin (required)
     * @param lang original language (required)
     * @param company production company (optional)
     * @param contentRating content rating id base on a country (optional)
     * @param genre Genre id. This id can be found using **_/genres** endpoint. (optional)
     * @param sort sort by results (optional)
     * @param sortType sort type ascending or descending (optional)
     * @param status status (optional)
     * @param year release year (optional)
     * @return InlineResponse20050
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20050 getSeriesFilter(String country, String lang, BigDecimal company, BigDecimal contentRating, BigDecimal genre, String sort, String sortType, BigDecimal status, BigDecimal year) throws ApiException {
        ApiResponse<InlineResponse20050> resp = getSeriesFilterWithHttpInfo(country, lang, company, contentRating, genre, sort, sortType, status, year);
        return resp.getData();
    }

    /**
     * 
     * Search series based on filter parameters
     * @param country country of origin (required)
     * @param lang original language (required)
     * @param company production company (optional)
     * @param contentRating content rating id base on a country (optional)
     * @param genre Genre id. This id can be found using **_/genres** endpoint. (optional)
     * @param sort sort by results (optional)
     * @param sortType sort type ascending or descending (optional)
     * @param status status (optional)
     * @param year release year (optional)
     * @return ApiResponse&lt;InlineResponse20050&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20050> getSeriesFilterWithHttpInfo(String country, String lang, BigDecimal company, BigDecimal contentRating, BigDecimal genre, String sort, String sortType, BigDecimal status, BigDecimal year) throws ApiException {
        okhttp3.Call call = getSeriesFilterValidateBeforeCall(country, lang, company, contentRating, genre, sort, sortType, status, year, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20050>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search series based on filter parameters
     * @param country country of origin (required)
     * @param lang original language (required)
     * @param company production company (optional)
     * @param contentRating content rating id base on a country (optional)
     * @param genre Genre id. This id can be found using **_/genres** endpoint. (optional)
     * @param sort sort by results (optional)
     * @param sortType sort type ascending or descending (optional)
     * @param status status (optional)
     * @param year release year (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSeriesFilterAsync(String country, String lang, BigDecimal company, BigDecimal contentRating, BigDecimal genre, String sort, String sortType, BigDecimal status, BigDecimal year, final ApiCallback<InlineResponse20050> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSeriesFilterValidateBeforeCall(country, lang, company, contentRating, genre, sort, sortType, status, year, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20050>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSeriesNextAired
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSeriesNextAiredCall(BigDecimal id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/nextAired"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeriesNextAiredValidateBeforeCall(BigDecimal id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSeriesNextAired(Async)");
        }

        okhttp3.Call call = getSeriesNextAiredCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns series base record including the nextAired field. &lt;br&gt; Note&amp;#58; nextAired was included in the base record endpoint but that field will deprecated in the future so developers should use the nextAired endpoint.
     * @param id id (required)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 getSeriesNextAired(BigDecimal id) throws ApiException {
        ApiResponse<InlineResponse20046> resp = getSeriesNextAiredWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * Returns series base record including the nextAired field. &lt;br&gt; Note&amp;#58; nextAired was included in the base record endpoint but that field will deprecated in the future so developers should use the nextAired endpoint.
     * @param id id (required)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> getSeriesNextAiredWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call call = getSeriesNextAiredValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns series base record including the nextAired field. &lt;br&gt; Note&amp;#58; nextAired was included in the base record endpoint but that field will deprecated in the future so developers should use the nextAired endpoint.
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSeriesNextAiredAsync(BigDecimal id, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSeriesNextAiredValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSeriesSeasonEpisodesTranslated
     * @param page  (required)
     * @param id id (required)
     * @param seasonType season-type (required)
     * @param lang  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSeriesSeasonEpisodesTranslatedCall(Integer page, BigDecimal id, String seasonType, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/episodes/{season-type}/{lang}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "season-type" + "\\}", apiClient.escapeString(seasonType.toString()))
            .replaceAll("\\{" + "lang" + "\\}", apiClient.escapeString(lang.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeriesSeasonEpisodesTranslatedValidateBeforeCall(Integer page, BigDecimal id, String seasonType, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getSeriesSeasonEpisodesTranslated(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSeriesSeasonEpisodesTranslated(Async)");
        }
        // verify the required parameter 'seasonType' is set
        if (seasonType == null) {
            throw new ApiException("Missing the required parameter 'seasonType' when calling getSeriesSeasonEpisodesTranslated(Async)");
        }
        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling getSeriesSeasonEpisodesTranslated(Async)");
        }

        okhttp3.Call call = getSeriesSeasonEpisodesTranslatedCall(page, id, seasonType, lang, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns series base record with episodes from the specified season type and language. Default returns the episodes in the series default season type.
     * @param page  (required)
     * @param id id (required)
     * @param seasonType season-type (required)
     * @param lang  (required)
     * @return InlineResponse20049
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20049 getSeriesSeasonEpisodesTranslated(Integer page, BigDecimal id, String seasonType, String lang) throws ApiException {
        ApiResponse<InlineResponse20049> resp = getSeriesSeasonEpisodesTranslatedWithHttpInfo(page, id, seasonType, lang);
        return resp.getData();
    }

    /**
     * 
     * Returns series base record with episodes from the specified season type and language. Default returns the episodes in the series default season type.
     * @param page  (required)
     * @param id id (required)
     * @param seasonType season-type (required)
     * @param lang  (required)
     * @return ApiResponse&lt;InlineResponse20049&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20049> getSeriesSeasonEpisodesTranslatedWithHttpInfo(Integer page, BigDecimal id, String seasonType, String lang) throws ApiException {
        okhttp3.Call call = getSeriesSeasonEpisodesTranslatedValidateBeforeCall(page, id, seasonType, lang, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20049>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns series base record with episodes from the specified season type and language. Default returns the episodes in the series default season type.
     * @param page  (required)
     * @param id id (required)
     * @param seasonType season-type (required)
     * @param lang  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSeriesSeasonEpisodesTranslatedAsync(Integer page, BigDecimal id, String seasonType, String lang, final ApiCallback<InlineResponse20049> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSeriesSeasonEpisodesTranslatedValidateBeforeCall(page, id, seasonType, lang, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20049>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSeriesTranslation
     * @param id id (required)
     * @param language language (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSeriesTranslationCall(BigDecimal id, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/translations/{language}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "language" + "\\}", apiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSeriesTranslationValidateBeforeCall(BigDecimal id, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSeriesTranslation(Async)");
        }
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getSeriesTranslation(Async)");
        }

        okhttp3.Call call = getSeriesTranslationCall(id, language, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns series translation record
     * @param id id (required)
     * @param language language (required)
     * @return InlineResponse20020
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20020 getSeriesTranslation(BigDecimal id, String language) throws ApiException {
        ApiResponse<InlineResponse20020> resp = getSeriesTranslationWithHttpInfo(id, language);
        return resp.getData();
    }

    /**
     * 
     * Returns series translation record
     * @param id id (required)
     * @param language language (required)
     * @return ApiResponse&lt;InlineResponse20020&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20020> getSeriesTranslationWithHttpInfo(BigDecimal id, String language) throws ApiException {
        okhttp3.Call call = getSeriesTranslationValidateBeforeCall(id, language, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20020>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns series translation record
     * @param id id (required)
     * @param language language (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSeriesTranslationAsync(BigDecimal id, String language, final ApiCallback<InlineResponse20020> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSeriesTranslationValidateBeforeCall(id, language, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20020>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
