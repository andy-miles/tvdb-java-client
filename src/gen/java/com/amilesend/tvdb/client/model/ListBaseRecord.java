/*
 * TVDB API V4
 * Documentation of [TheTVDB](https://thetvdb.com/) API V4. All related information is linked from our [Github repo](https://github.com/thetvdb/v4-api). You might also want to use our [Postman collection] (https://www.getpostman.com/collections/7a9397ce69ff246f74d0) ## Authentication 1. Use the /login endpoint and provide your API key as \"apikey\". If you have a user-supported key, also provide your subscriber PIN as \"pin\". Otherwise completely remove \"pin\" from your call. 2. Executing this call will provide you with a bearer token, which is valid for 1 month. 3. Provide your bearer token for subsequent API calls by clicking Authorize below or including in the header of all direct API calls: `Authorization: Bearer [your-token]`  ## Notes 1. \"score\" is a field across almost all entities.  We generate scores for different types of entities in various ways, so no assumptions should be made about the meaning of this value.  It is simply used to hint at relative popularity for sorting purposes. 
 *
 * OpenAPI spec version: 4.7.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amilesend.tvdb.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.amilesend.tvdb.client.model.Alias;
import com.amilesend.tvdb.client.model.RemoteID;
import com.amilesend.tvdb.client.model.TagOption;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * base list record
 */
@Schema(description = "base list record")


public class ListBaseRecord {
  @SerializedName("aliases")
  private List<Alias> aliases = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("image")
  private String image = null;

  @SerializedName("imageIsFallback")
  private Boolean imageIsFallback = null;

  @SerializedName("isOfficial")
  private Boolean isOfficial = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("nameTranslations")
  private List<String> nameTranslations = null;

  @SerializedName("overview")
  private String overview = null;

  @SerializedName("overviewTranslations")
  private List<String> overviewTranslations = null;

  @SerializedName("remoteIds")
  private List<RemoteID> remoteIds = null;

  @SerializedName("tags")
  private List<TagOption> tags = null;

  @SerializedName("score")
  private Integer score = null;

  @SerializedName("url")
  private String url = null;

  public ListBaseRecord aliases(List<Alias> aliases) {
    this.aliases = aliases;
    return this;
  }

  public ListBaseRecord addAliasesItem(Alias aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<Alias>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

   /**
   * Get aliases
   * @return aliases
  **/
  @Schema(description = "")
  public List<Alias> getAliases() {
    return aliases;
  }

  public void setAliases(List<Alias> aliases) {
    this.aliases = aliases;
  }

  public ListBaseRecord id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public ListBaseRecord image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @Schema(description = "")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public ListBaseRecord imageIsFallback(Boolean imageIsFallback) {
    this.imageIsFallback = imageIsFallback;
    return this;
  }

   /**
   * Get imageIsFallback
   * @return imageIsFallback
  **/
  @Schema(description = "")
  public Boolean isImageIsFallback() {
    return imageIsFallback;
  }

  public void setImageIsFallback(Boolean imageIsFallback) {
    this.imageIsFallback = imageIsFallback;
  }

  public ListBaseRecord isOfficial(Boolean isOfficial) {
    this.isOfficial = isOfficial;
    return this;
  }

   /**
   * Get isOfficial
   * @return isOfficial
  **/
  @Schema(description = "")
  public Boolean isIsOfficial() {
    return isOfficial;
  }

  public void setIsOfficial(Boolean isOfficial) {
    this.isOfficial = isOfficial;
  }

  public ListBaseRecord name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ListBaseRecord nameTranslations(List<String> nameTranslations) {
    this.nameTranslations = nameTranslations;
    return this;
  }

  public ListBaseRecord addNameTranslationsItem(String nameTranslationsItem) {
    if (this.nameTranslations == null) {
      this.nameTranslations = new ArrayList<String>();
    }
    this.nameTranslations.add(nameTranslationsItem);
    return this;
  }

   /**
   * Get nameTranslations
   * @return nameTranslations
  **/
  @Schema(description = "")
  public List<String> getNameTranslations() {
    return nameTranslations;
  }

  public void setNameTranslations(List<String> nameTranslations) {
    this.nameTranslations = nameTranslations;
  }

  public ListBaseRecord overview(String overview) {
    this.overview = overview;
    return this;
  }

   /**
   * Get overview
   * @return overview
  **/
  @Schema(description = "")
  public String getOverview() {
    return overview;
  }

  public void setOverview(String overview) {
    this.overview = overview;
  }

  public ListBaseRecord overviewTranslations(List<String> overviewTranslations) {
    this.overviewTranslations = overviewTranslations;
    return this;
  }

  public ListBaseRecord addOverviewTranslationsItem(String overviewTranslationsItem) {
    if (this.overviewTranslations == null) {
      this.overviewTranslations = new ArrayList<String>();
    }
    this.overviewTranslations.add(overviewTranslationsItem);
    return this;
  }

   /**
   * Get overviewTranslations
   * @return overviewTranslations
  **/
  @Schema(description = "")
  public List<String> getOverviewTranslations() {
    return overviewTranslations;
  }

  public void setOverviewTranslations(List<String> overviewTranslations) {
    this.overviewTranslations = overviewTranslations;
  }

  public ListBaseRecord remoteIds(List<RemoteID> remoteIds) {
    this.remoteIds = remoteIds;
    return this;
  }

  public ListBaseRecord addRemoteIdsItem(RemoteID remoteIdsItem) {
    if (this.remoteIds == null) {
      this.remoteIds = new ArrayList<RemoteID>();
    }
    this.remoteIds.add(remoteIdsItem);
    return this;
  }

   /**
   * Get remoteIds
   * @return remoteIds
  **/
  @Schema(description = "")
  public List<RemoteID> getRemoteIds() {
    return remoteIds;
  }

  public void setRemoteIds(List<RemoteID> remoteIds) {
    this.remoteIds = remoteIds;
  }

  public ListBaseRecord tags(List<TagOption> tags) {
    this.tags = tags;
    return this;
  }

  public ListBaseRecord addTagsItem(TagOption tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<TagOption>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(description = "")
  public List<TagOption> getTags() {
    return tags;
  }

  public void setTags(List<TagOption> tags) {
    this.tags = tags;
  }

  public ListBaseRecord score(Integer score) {
    this.score = score;
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @Schema(description = "")
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }

  public ListBaseRecord url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListBaseRecord listBaseRecord = (ListBaseRecord) o;
    return Objects.equals(this.aliases, listBaseRecord.aliases) &&
        Objects.equals(this.id, listBaseRecord.id) &&
        Objects.equals(this.image, listBaseRecord.image) &&
        Objects.equals(this.imageIsFallback, listBaseRecord.imageIsFallback) &&
        Objects.equals(this.isOfficial, listBaseRecord.isOfficial) &&
        Objects.equals(this.name, listBaseRecord.name) &&
        Objects.equals(this.nameTranslations, listBaseRecord.nameTranslations) &&
        Objects.equals(this.overview, listBaseRecord.overview) &&
        Objects.equals(this.overviewTranslations, listBaseRecord.overviewTranslations) &&
        Objects.equals(this.remoteIds, listBaseRecord.remoteIds) &&
        Objects.equals(this.tags, listBaseRecord.tags) &&
        Objects.equals(this.score, listBaseRecord.score) &&
        Objects.equals(this.url, listBaseRecord.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliases, id, image, imageIsFallback, isOfficial, name, nameTranslations, overview, overviewTranslations, remoteIds, tags, score, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListBaseRecord {\n");
    
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imageIsFallback: ").append(toIndentedString(imageIsFallback)).append("\n");
    sb.append("    isOfficial: ").append(toIndentedString(isOfficial)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameTranslations: ").append(toIndentedString(nameTranslations)).append("\n");
    sb.append("    overview: ").append(toIndentedString(overview)).append("\n");
    sb.append("    overviewTranslations: ").append(toIndentedString(overviewTranslations)).append("\n");
    sb.append("    remoteIds: ").append(toIndentedString(remoteIds)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
