/*
 * TVDB API V4
 * Documentation of [TheTVDB](https://thetvdb.com/) API V4. All related information is linked from our [Github repo](https://github.com/thetvdb/v4-api). You might also want to use our [Postman collection] (https://www.getpostman.com/collections/7a9397ce69ff246f74d0) ## Authentication 1. Use the /login endpoint and provide your API key as \"apikey\". If you have a user-supported key, also provide your subscriber PIN as \"pin\". Otherwise completely remove \"pin\" from your call. 2. Executing this call will provide you with a bearer token, which is valid for 1 month. 3. Provide your bearer token for subsequent API calls by clicking Authorize below or including in the header of all direct API calls: `Authorization: Bearer [your-token]`  ## Notes 1. \"score\" is a field across almost all entities.  We generate scores for different types of entities in various ways, so no assumptions should be made about the meaning of this value.  It is simply used to hint at relative popularity for sorting purposes. 
 *
 * OpenAPI spec version: 4.7.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amilesend.tvdb.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.amilesend.tvdb.client.model.AwardBaseRecord;
import com.amilesend.tvdb.client.model.AwardNomineeBaseRecord;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * extended award category record
 */
@Schema(description = "extended award category record")


public class AwardCategoryExtendedRecord {
  @SerializedName("allowCoNominees")
  private Boolean allowCoNominees = null;

  @SerializedName("award")
  private AwardBaseRecord award = null;

  @SerializedName("forMovies")
  private Boolean forMovies = null;

  @SerializedName("forSeries")
  private Boolean forSeries = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("nominees")
  private List<AwardNomineeBaseRecord> nominees = null;

  public AwardCategoryExtendedRecord allowCoNominees(Boolean allowCoNominees) {
    this.allowCoNominees = allowCoNominees;
    return this;
  }

   /**
   * Get allowCoNominees
   * @return allowCoNominees
  **/
  @Schema(description = "")
  public Boolean isAllowCoNominees() {
    return allowCoNominees;
  }

  public void setAllowCoNominees(Boolean allowCoNominees) {
    this.allowCoNominees = allowCoNominees;
  }

  public AwardCategoryExtendedRecord award(AwardBaseRecord award) {
    this.award = award;
    return this;
  }

   /**
   * Get award
   * @return award
  **/
  @Schema(description = "")
  public AwardBaseRecord getAward() {
    return award;
  }

  public void setAward(AwardBaseRecord award) {
    this.award = award;
  }

  public AwardCategoryExtendedRecord forMovies(Boolean forMovies) {
    this.forMovies = forMovies;
    return this;
  }

   /**
   * Get forMovies
   * @return forMovies
  **/
  @Schema(description = "")
  public Boolean isForMovies() {
    return forMovies;
  }

  public void setForMovies(Boolean forMovies) {
    this.forMovies = forMovies;
  }

  public AwardCategoryExtendedRecord forSeries(Boolean forSeries) {
    this.forSeries = forSeries;
    return this;
  }

   /**
   * Get forSeries
   * @return forSeries
  **/
  @Schema(description = "")
  public Boolean isForSeries() {
    return forSeries;
  }

  public void setForSeries(Boolean forSeries) {
    this.forSeries = forSeries;
  }

  public AwardCategoryExtendedRecord id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public AwardCategoryExtendedRecord name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AwardCategoryExtendedRecord nominees(List<AwardNomineeBaseRecord> nominees) {
    this.nominees = nominees;
    return this;
  }

  public AwardCategoryExtendedRecord addNomineesItem(AwardNomineeBaseRecord nomineesItem) {
    if (this.nominees == null) {
      this.nominees = new ArrayList<AwardNomineeBaseRecord>();
    }
    this.nominees.add(nomineesItem);
    return this;
  }

   /**
   * Get nominees
   * @return nominees
  **/
  @Schema(description = "")
  public List<AwardNomineeBaseRecord> getNominees() {
    return nominees;
  }

  public void setNominees(List<AwardNomineeBaseRecord> nominees) {
    this.nominees = nominees;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AwardCategoryExtendedRecord awardCategoryExtendedRecord = (AwardCategoryExtendedRecord) o;
    return Objects.equals(this.allowCoNominees, awardCategoryExtendedRecord.allowCoNominees) &&
        Objects.equals(this.award, awardCategoryExtendedRecord.award) &&
        Objects.equals(this.forMovies, awardCategoryExtendedRecord.forMovies) &&
        Objects.equals(this.forSeries, awardCategoryExtendedRecord.forSeries) &&
        Objects.equals(this.id, awardCategoryExtendedRecord.id) &&
        Objects.equals(this.name, awardCategoryExtendedRecord.name) &&
        Objects.equals(this.nominees, awardCategoryExtendedRecord.nominees);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowCoNominees, award, forMovies, forSeries, id, name, nominees);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AwardCategoryExtendedRecord {\n");
    
    sb.append("    allowCoNominees: ").append(toIndentedString(allowCoNominees)).append("\n");
    sb.append("    award: ").append(toIndentedString(award)).append("\n");
    sb.append("    forMovies: ").append(toIndentedString(forMovies)).append("\n");
    sb.append("    forSeries: ").append(toIndentedString(forSeries)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nominees: ").append(toIndentedString(nominees)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
