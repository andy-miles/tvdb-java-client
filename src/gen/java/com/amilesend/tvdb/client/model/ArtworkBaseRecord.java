/*
 * TVDB API V4
 * Documentation of [TheTVDB](https://thetvdb.com/) API V4. All related information is linked from our [Github repo](https://github.com/thetvdb/v4-api). You might also want to use our [Postman collection] (https://www.getpostman.com/collections/7a9397ce69ff246f74d0) ## Authentication 1. Use the /login endpoint and provide your API key as \"apikey\". If you have a user-supported key, also provide your subscriber PIN as \"pin\". Otherwise completely remove \"pin\" from your call. 2. Executing this call will provide you with a bearer token, which is valid for 1 month. 3. Provide your bearer token for subsequent API calls by clicking Authorize below or including in the header of all direct API calls: `Authorization: Bearer [your-token]`  ## Notes 1. \"score\" is a field across almost all entities.  We generate scores for different types of entities in various ways, so no assumptions should be made about the meaning of this value.  It is simply used to hint at relative popularity for sorting purposes. 
 *
 * OpenAPI spec version: 4.7.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amilesend.tvdb.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * base artwork record
 */
@Schema(description = "base artwork record")


public class ArtworkBaseRecord {
  @SerializedName("height")
  private Long height = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("image")
  private String image = null;

  @SerializedName("includesText")
  private Boolean includesText = null;

  @SerializedName("language")
  private String language = null;

  @SerializedName("score")
  private BigDecimal score = null;

  @SerializedName("thumbnail")
  private String thumbnail = null;

  @SerializedName("type")
  private Long type = null;

  @SerializedName("width")
  private Long width = null;

  public ArtworkBaseRecord height(Long height) {
    this.height = height;
    return this;
  }

   /**
   * Get height
   * @return height
  **/
  @Schema(description = "")
  public Long getHeight() {
    return height;
  }

  public void setHeight(Long height) {
    this.height = height;
  }

  public ArtworkBaseRecord id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public ArtworkBaseRecord image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @Schema(description = "")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public ArtworkBaseRecord includesText(Boolean includesText) {
    this.includesText = includesText;
    return this;
  }

   /**
   * Get includesText
   * @return includesText
  **/
  @Schema(description = "")
  public Boolean isIncludesText() {
    return includesText;
  }

  public void setIncludesText(Boolean includesText) {
    this.includesText = includesText;
  }

  public ArtworkBaseRecord language(String language) {
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @Schema(description = "")
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public ArtworkBaseRecord score(BigDecimal score) {
    this.score = score;
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @Schema(description = "")
  public BigDecimal getScore() {
    return score;
  }

  public void setScore(BigDecimal score) {
    this.score = score;
  }

  public ArtworkBaseRecord thumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

   /**
   * Get thumbnail
   * @return thumbnail
  **/
  @Schema(description = "")
  public String getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
  }

  public ArtworkBaseRecord type(Long type) {
    this.type = type;
    return this;
  }

   /**
   * The artwork type corresponds to the ids from the /artwork/types endpoint.
   * @return type
  **/
  @Schema(description = "The artwork type corresponds to the ids from the /artwork/types endpoint.")
  public Long getType() {
    return type;
  }

  public void setType(Long type) {
    this.type = type;
  }

  public ArtworkBaseRecord width(Long width) {
    this.width = width;
    return this;
  }

   /**
   * Get width
   * @return width
  **/
  @Schema(description = "")
  public Long getWidth() {
    return width;
  }

  public void setWidth(Long width) {
    this.width = width;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArtworkBaseRecord artworkBaseRecord = (ArtworkBaseRecord) o;
    return Objects.equals(this.height, artworkBaseRecord.height) &&
        Objects.equals(this.id, artworkBaseRecord.id) &&
        Objects.equals(this.image, artworkBaseRecord.image) &&
        Objects.equals(this.includesText, artworkBaseRecord.includesText) &&
        Objects.equals(this.language, artworkBaseRecord.language) &&
        Objects.equals(this.score, artworkBaseRecord.score) &&
        Objects.equals(this.thumbnail, artworkBaseRecord.thumbnail) &&
        Objects.equals(this.type, artworkBaseRecord.type) &&
        Objects.equals(this.width, artworkBaseRecord.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(height, id, image, includesText, language, score, thumbnail, type, width);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArtworkBaseRecord {\n");
    
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    includesText: ").append(toIndentedString(includesText)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
