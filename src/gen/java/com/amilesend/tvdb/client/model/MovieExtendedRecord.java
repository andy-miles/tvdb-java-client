/*
 * TVDB API V4
 * Documentation of [TheTVDB](https://thetvdb.com/) API V4. All related information is linked from our [Github repo](https://github.com/thetvdb/v4-api). You might also want to use our [Postman collection] (https://www.getpostman.com/collections/7a9397ce69ff246f74d0) ## Authentication 1. Use the /login endpoint and provide your API key as \"apikey\". If you have a user-supported key, also provide your subscriber PIN as \"pin\". Otherwise completely remove \"pin\" from your call. 2. Executing this call will provide you with a bearer token, which is valid for 1 month. 3. Provide your bearer token for subsequent API calls by clicking Authorize below or including in the header of all direct API calls: `Authorization: Bearer [your-token]`  ## Notes 1. \"score\" is a field across almost all entities.  We generate scores for different types of entities in various ways, so no assumptions should be made about the meaning of this value.  It is simply used to hint at relative popularity for sorting purposes. 
 *
 * OpenAPI spec version: 4.7.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amilesend.tvdb.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.amilesend.tvdb.client.model.Alias;
import com.amilesend.tvdb.client.model.ArtworkBaseRecord;
import com.amilesend.tvdb.client.model.AwardBaseRecord;
import com.amilesend.tvdb.client.model.Character;
import com.amilesend.tvdb.client.model.Companies;
import com.amilesend.tvdb.client.model.ContentRating;
import com.amilesend.tvdb.client.model.GenreBaseRecord;
import com.amilesend.tvdb.client.model.Inspiration;
import com.amilesend.tvdb.client.model.ListBaseRecord;
import com.amilesend.tvdb.client.model.ProductionCountry;
import com.amilesend.tvdb.client.model.Release;
import com.amilesend.tvdb.client.model.RemoteID;
import com.amilesend.tvdb.client.model.Status;
import com.amilesend.tvdb.client.model.StudioBaseRecord;
import com.amilesend.tvdb.client.model.TagOption;
import com.amilesend.tvdb.client.model.Trailer;
import com.amilesend.tvdb.client.model.TranslationExtended;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * extended movie record
 */
@Schema(description = "extended movie record")


public class MovieExtendedRecord {
  @SerializedName("aliases")
  private List<Alias> aliases = null;

  @SerializedName("artworks")
  private List<ArtworkBaseRecord> artworks = null;

  @SerializedName("audioLanguages")
  private List<String> audioLanguages = null;

  @SerializedName("awards")
  private List<AwardBaseRecord> awards = null;

  @SerializedName("boxOffice")
  private String boxOffice = null;

  @SerializedName("boxOfficeUS")
  private String boxOfficeUS = null;

  @SerializedName("budget")
  private String budget = null;

  @SerializedName("characters")
  private List<Character> characters = null;

  @SerializedName("companies")
  private Companies companies = null;

  @SerializedName("contentRatings")
  private List<ContentRating> contentRatings = null;

  @SerializedName("first_release")
  private Release firstRelease = null;

  @SerializedName("genres")
  private List<GenreBaseRecord> genres = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("image")
  private String image = null;

  @SerializedName("inspirations")
  private List<Inspiration> inspirations = null;

  @SerializedName("lastUpdated")
  private String lastUpdated = null;

  @SerializedName("lists")
  private List<ListBaseRecord> lists = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("nameTranslations")
  private List<String> nameTranslations = null;

  @SerializedName("originalCountry")
  private String originalCountry = null;

  @SerializedName("originalLanguage")
  private String originalLanguage = null;

  @SerializedName("overviewTranslations")
  private List<String> overviewTranslations = null;

  @SerializedName("production_countries")
  private List<ProductionCountry> productionCountries = null;

  @SerializedName("releases")
  private List<Release> releases = null;

  @SerializedName("remoteIds")
  private List<RemoteID> remoteIds = null;

  @SerializedName("runtime")
  private Integer runtime = null;

  @SerializedName("score")
  private Double score = null;

  @SerializedName("slug")
  private String slug = null;

  @SerializedName("spoken_languages")
  private List<String> spokenLanguages = null;

  @SerializedName("status")
  private Status status = null;

  @SerializedName("studios")
  private List<StudioBaseRecord> studios = null;

  @SerializedName("subtitleLanguages")
  private List<String> subtitleLanguages = null;

  @SerializedName("tagOptions")
  private List<TagOption> tagOptions = null;

  @SerializedName("trailers")
  private List<Trailer> trailers = null;

  @SerializedName("translations")
  private TranslationExtended translations = null;

  @SerializedName("year")
  private String year = null;

  public MovieExtendedRecord aliases(List<Alias> aliases) {
    this.aliases = aliases;
    return this;
  }

  public MovieExtendedRecord addAliasesItem(Alias aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<Alias>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

   /**
   * Get aliases
   * @return aliases
  **/
  @Schema(description = "")
  public List<Alias> getAliases() {
    return aliases;
  }

  public void setAliases(List<Alias> aliases) {
    this.aliases = aliases;
  }

  public MovieExtendedRecord artworks(List<ArtworkBaseRecord> artworks) {
    this.artworks = artworks;
    return this;
  }

  public MovieExtendedRecord addArtworksItem(ArtworkBaseRecord artworksItem) {
    if (this.artworks == null) {
      this.artworks = new ArrayList<ArtworkBaseRecord>();
    }
    this.artworks.add(artworksItem);
    return this;
  }

   /**
   * Get artworks
   * @return artworks
  **/
  @Schema(description = "")
  public List<ArtworkBaseRecord> getArtworks() {
    return artworks;
  }

  public void setArtworks(List<ArtworkBaseRecord> artworks) {
    this.artworks = artworks;
  }

  public MovieExtendedRecord audioLanguages(List<String> audioLanguages) {
    this.audioLanguages = audioLanguages;
    return this;
  }

  public MovieExtendedRecord addAudioLanguagesItem(String audioLanguagesItem) {
    if (this.audioLanguages == null) {
      this.audioLanguages = new ArrayList<String>();
    }
    this.audioLanguages.add(audioLanguagesItem);
    return this;
  }

   /**
   * Get audioLanguages
   * @return audioLanguages
  **/
  @Schema(description = "")
  public List<String> getAudioLanguages() {
    return audioLanguages;
  }

  public void setAudioLanguages(List<String> audioLanguages) {
    this.audioLanguages = audioLanguages;
  }

  public MovieExtendedRecord awards(List<AwardBaseRecord> awards) {
    this.awards = awards;
    return this;
  }

  public MovieExtendedRecord addAwardsItem(AwardBaseRecord awardsItem) {
    if (this.awards == null) {
      this.awards = new ArrayList<AwardBaseRecord>();
    }
    this.awards.add(awardsItem);
    return this;
  }

   /**
   * Get awards
   * @return awards
  **/
  @Schema(description = "")
  public List<AwardBaseRecord> getAwards() {
    return awards;
  }

  public void setAwards(List<AwardBaseRecord> awards) {
    this.awards = awards;
  }

  public MovieExtendedRecord boxOffice(String boxOffice) {
    this.boxOffice = boxOffice;
    return this;
  }

   /**
   * Get boxOffice
   * @return boxOffice
  **/
  @Schema(description = "")
  public String getBoxOffice() {
    return boxOffice;
  }

  public void setBoxOffice(String boxOffice) {
    this.boxOffice = boxOffice;
  }

  public MovieExtendedRecord boxOfficeUS(String boxOfficeUS) {
    this.boxOfficeUS = boxOfficeUS;
    return this;
  }

   /**
   * Get boxOfficeUS
   * @return boxOfficeUS
  **/
  @Schema(description = "")
  public String getBoxOfficeUS() {
    return boxOfficeUS;
  }

  public void setBoxOfficeUS(String boxOfficeUS) {
    this.boxOfficeUS = boxOfficeUS;
  }

  public MovieExtendedRecord budget(String budget) {
    this.budget = budget;
    return this;
  }

   /**
   * Get budget
   * @return budget
  **/
  @Schema(description = "")
  public String getBudget() {
    return budget;
  }

  public void setBudget(String budget) {
    this.budget = budget;
  }

  public MovieExtendedRecord characters(List<Character> characters) {
    this.characters = characters;
    return this;
  }

  public MovieExtendedRecord addCharactersItem(Character charactersItem) {
    if (this.characters == null) {
      this.characters = new ArrayList<Character>();
    }
    this.characters.add(charactersItem);
    return this;
  }

   /**
   * Get characters
   * @return characters
  **/
  @Schema(description = "")
  public List<Character> getCharacters() {
    return characters;
  }

  public void setCharacters(List<Character> characters) {
    this.characters = characters;
  }

  public MovieExtendedRecord companies(Companies companies) {
    this.companies = companies;
    return this;
  }

   /**
   * Get companies
   * @return companies
  **/
  @Schema(description = "")
  public Companies getCompanies() {
    return companies;
  }

  public void setCompanies(Companies companies) {
    this.companies = companies;
  }

  public MovieExtendedRecord contentRatings(List<ContentRating> contentRatings) {
    this.contentRatings = contentRatings;
    return this;
  }

  public MovieExtendedRecord addContentRatingsItem(ContentRating contentRatingsItem) {
    if (this.contentRatings == null) {
      this.contentRatings = new ArrayList<ContentRating>();
    }
    this.contentRatings.add(contentRatingsItem);
    return this;
  }

   /**
   * Get contentRatings
   * @return contentRatings
  **/
  @Schema(description = "")
  public List<ContentRating> getContentRatings() {
    return contentRatings;
  }

  public void setContentRatings(List<ContentRating> contentRatings) {
    this.contentRatings = contentRatings;
  }

  public MovieExtendedRecord firstRelease(Release firstRelease) {
    this.firstRelease = firstRelease;
    return this;
  }

   /**
   * Get firstRelease
   * @return firstRelease
  **/
  @Schema(description = "")
  public Release getFirstRelease() {
    return firstRelease;
  }

  public void setFirstRelease(Release firstRelease) {
    this.firstRelease = firstRelease;
  }

  public MovieExtendedRecord genres(List<GenreBaseRecord> genres) {
    this.genres = genres;
    return this;
  }

  public MovieExtendedRecord addGenresItem(GenreBaseRecord genresItem) {
    if (this.genres == null) {
      this.genres = new ArrayList<GenreBaseRecord>();
    }
    this.genres.add(genresItem);
    return this;
  }

   /**
   * Get genres
   * @return genres
  **/
  @Schema(description = "")
  public List<GenreBaseRecord> getGenres() {
    return genres;
  }

  public void setGenres(List<GenreBaseRecord> genres) {
    this.genres = genres;
  }

  public MovieExtendedRecord id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public MovieExtendedRecord image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @Schema(description = "")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public MovieExtendedRecord inspirations(List<Inspiration> inspirations) {
    this.inspirations = inspirations;
    return this;
  }

  public MovieExtendedRecord addInspirationsItem(Inspiration inspirationsItem) {
    if (this.inspirations == null) {
      this.inspirations = new ArrayList<Inspiration>();
    }
    this.inspirations.add(inspirationsItem);
    return this;
  }

   /**
   * Get inspirations
   * @return inspirations
  **/
  @Schema(description = "")
  public List<Inspiration> getInspirations() {
    return inspirations;
  }

  public void setInspirations(List<Inspiration> inspirations) {
    this.inspirations = inspirations;
  }

  public MovieExtendedRecord lastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @Schema(description = "")
  public String getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }

  public MovieExtendedRecord lists(List<ListBaseRecord> lists) {
    this.lists = lists;
    return this;
  }

  public MovieExtendedRecord addListsItem(ListBaseRecord listsItem) {
    if (this.lists == null) {
      this.lists = new ArrayList<ListBaseRecord>();
    }
    this.lists.add(listsItem);
    return this;
  }

   /**
   * Get lists
   * @return lists
  **/
  @Schema(description = "")
  public List<ListBaseRecord> getLists() {
    return lists;
  }

  public void setLists(List<ListBaseRecord> lists) {
    this.lists = lists;
  }

  public MovieExtendedRecord name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public MovieExtendedRecord nameTranslations(List<String> nameTranslations) {
    this.nameTranslations = nameTranslations;
    return this;
  }

  public MovieExtendedRecord addNameTranslationsItem(String nameTranslationsItem) {
    if (this.nameTranslations == null) {
      this.nameTranslations = new ArrayList<String>();
    }
    this.nameTranslations.add(nameTranslationsItem);
    return this;
  }

   /**
   * Get nameTranslations
   * @return nameTranslations
  **/
  @Schema(description = "")
  public List<String> getNameTranslations() {
    return nameTranslations;
  }

  public void setNameTranslations(List<String> nameTranslations) {
    this.nameTranslations = nameTranslations;
  }

  public MovieExtendedRecord originalCountry(String originalCountry) {
    this.originalCountry = originalCountry;
    return this;
  }

   /**
   * Get originalCountry
   * @return originalCountry
  **/
  @Schema(description = "")
  public String getOriginalCountry() {
    return originalCountry;
  }

  public void setOriginalCountry(String originalCountry) {
    this.originalCountry = originalCountry;
  }

  public MovieExtendedRecord originalLanguage(String originalLanguage) {
    this.originalLanguage = originalLanguage;
    return this;
  }

   /**
   * Get originalLanguage
   * @return originalLanguage
  **/
  @Schema(description = "")
  public String getOriginalLanguage() {
    return originalLanguage;
  }

  public void setOriginalLanguage(String originalLanguage) {
    this.originalLanguage = originalLanguage;
  }

  public MovieExtendedRecord overviewTranslations(List<String> overviewTranslations) {
    this.overviewTranslations = overviewTranslations;
    return this;
  }

  public MovieExtendedRecord addOverviewTranslationsItem(String overviewTranslationsItem) {
    if (this.overviewTranslations == null) {
      this.overviewTranslations = new ArrayList<String>();
    }
    this.overviewTranslations.add(overviewTranslationsItem);
    return this;
  }

   /**
   * Get overviewTranslations
   * @return overviewTranslations
  **/
  @Schema(description = "")
  public List<String> getOverviewTranslations() {
    return overviewTranslations;
  }

  public void setOverviewTranslations(List<String> overviewTranslations) {
    this.overviewTranslations = overviewTranslations;
  }

  public MovieExtendedRecord productionCountries(List<ProductionCountry> productionCountries) {
    this.productionCountries = productionCountries;
    return this;
  }

  public MovieExtendedRecord addProductionCountriesItem(ProductionCountry productionCountriesItem) {
    if (this.productionCountries == null) {
      this.productionCountries = new ArrayList<ProductionCountry>();
    }
    this.productionCountries.add(productionCountriesItem);
    return this;
  }

   /**
   * Get productionCountries
   * @return productionCountries
  **/
  @Schema(description = "")
  public List<ProductionCountry> getProductionCountries() {
    return productionCountries;
  }

  public void setProductionCountries(List<ProductionCountry> productionCountries) {
    this.productionCountries = productionCountries;
  }

  public MovieExtendedRecord releases(List<Release> releases) {
    this.releases = releases;
    return this;
  }

  public MovieExtendedRecord addReleasesItem(Release releasesItem) {
    if (this.releases == null) {
      this.releases = new ArrayList<Release>();
    }
    this.releases.add(releasesItem);
    return this;
  }

   /**
   * Get releases
   * @return releases
  **/
  @Schema(description = "")
  public List<Release> getReleases() {
    return releases;
  }

  public void setReleases(List<Release> releases) {
    this.releases = releases;
  }

  public MovieExtendedRecord remoteIds(List<RemoteID> remoteIds) {
    this.remoteIds = remoteIds;
    return this;
  }

  public MovieExtendedRecord addRemoteIdsItem(RemoteID remoteIdsItem) {
    if (this.remoteIds == null) {
      this.remoteIds = new ArrayList<RemoteID>();
    }
    this.remoteIds.add(remoteIdsItem);
    return this;
  }

   /**
   * Get remoteIds
   * @return remoteIds
  **/
  @Schema(description = "")
  public List<RemoteID> getRemoteIds() {
    return remoteIds;
  }

  public void setRemoteIds(List<RemoteID> remoteIds) {
    this.remoteIds = remoteIds;
  }

  public MovieExtendedRecord runtime(Integer runtime) {
    this.runtime = runtime;
    return this;
  }

   /**
   * Get runtime
   * @return runtime
  **/
  @Schema(description = "")
  public Integer getRuntime() {
    return runtime;
  }

  public void setRuntime(Integer runtime) {
    this.runtime = runtime;
  }

  public MovieExtendedRecord score(Double score) {
    this.score = score;
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @Schema(description = "")
  public Double getScore() {
    return score;
  }

  public void setScore(Double score) {
    this.score = score;
  }

  public MovieExtendedRecord slug(String slug) {
    this.slug = slug;
    return this;
  }

   /**
   * Get slug
   * @return slug
  **/
  @Schema(description = "")
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }

  public MovieExtendedRecord spokenLanguages(List<String> spokenLanguages) {
    this.spokenLanguages = spokenLanguages;
    return this;
  }

  public MovieExtendedRecord addSpokenLanguagesItem(String spokenLanguagesItem) {
    if (this.spokenLanguages == null) {
      this.spokenLanguages = new ArrayList<String>();
    }
    this.spokenLanguages.add(spokenLanguagesItem);
    return this;
  }

   /**
   * Get spokenLanguages
   * @return spokenLanguages
  **/
  @Schema(description = "")
  public List<String> getSpokenLanguages() {
    return spokenLanguages;
  }

  public void setSpokenLanguages(List<String> spokenLanguages) {
    this.spokenLanguages = spokenLanguages;
  }

  public MovieExtendedRecord status(Status status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }

  public MovieExtendedRecord studios(List<StudioBaseRecord> studios) {
    this.studios = studios;
    return this;
  }

  public MovieExtendedRecord addStudiosItem(StudioBaseRecord studiosItem) {
    if (this.studios == null) {
      this.studios = new ArrayList<StudioBaseRecord>();
    }
    this.studios.add(studiosItem);
    return this;
  }

   /**
   * Get studios
   * @return studios
  **/
  @Schema(description = "")
  public List<StudioBaseRecord> getStudios() {
    return studios;
  }

  public void setStudios(List<StudioBaseRecord> studios) {
    this.studios = studios;
  }

  public MovieExtendedRecord subtitleLanguages(List<String> subtitleLanguages) {
    this.subtitleLanguages = subtitleLanguages;
    return this;
  }

  public MovieExtendedRecord addSubtitleLanguagesItem(String subtitleLanguagesItem) {
    if (this.subtitleLanguages == null) {
      this.subtitleLanguages = new ArrayList<String>();
    }
    this.subtitleLanguages.add(subtitleLanguagesItem);
    return this;
  }

   /**
   * Get subtitleLanguages
   * @return subtitleLanguages
  **/
  @Schema(description = "")
  public List<String> getSubtitleLanguages() {
    return subtitleLanguages;
  }

  public void setSubtitleLanguages(List<String> subtitleLanguages) {
    this.subtitleLanguages = subtitleLanguages;
  }

  public MovieExtendedRecord tagOptions(List<TagOption> tagOptions) {
    this.tagOptions = tagOptions;
    return this;
  }

  public MovieExtendedRecord addTagOptionsItem(TagOption tagOptionsItem) {
    if (this.tagOptions == null) {
      this.tagOptions = new ArrayList<TagOption>();
    }
    this.tagOptions.add(tagOptionsItem);
    return this;
  }

   /**
   * Get tagOptions
   * @return tagOptions
  **/
  @Schema(description = "")
  public List<TagOption> getTagOptions() {
    return tagOptions;
  }

  public void setTagOptions(List<TagOption> tagOptions) {
    this.tagOptions = tagOptions;
  }

  public MovieExtendedRecord trailers(List<Trailer> trailers) {
    this.trailers = trailers;
    return this;
  }

  public MovieExtendedRecord addTrailersItem(Trailer trailersItem) {
    if (this.trailers == null) {
      this.trailers = new ArrayList<Trailer>();
    }
    this.trailers.add(trailersItem);
    return this;
  }

   /**
   * Get trailers
   * @return trailers
  **/
  @Schema(description = "")
  public List<Trailer> getTrailers() {
    return trailers;
  }

  public void setTrailers(List<Trailer> trailers) {
    this.trailers = trailers;
  }

  public MovieExtendedRecord translations(TranslationExtended translations) {
    this.translations = translations;
    return this;
  }

   /**
   * Get translations
   * @return translations
  **/
  @Schema(description = "")
  public TranslationExtended getTranslations() {
    return translations;
  }

  public void setTranslations(TranslationExtended translations) {
    this.translations = translations;
  }

  public MovieExtendedRecord year(String year) {
    this.year = year;
    return this;
  }

   /**
   * Get year
   * @return year
  **/
  @Schema(description = "")
  public String getYear() {
    return year;
  }

  public void setYear(String year) {
    this.year = year;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MovieExtendedRecord movieExtendedRecord = (MovieExtendedRecord) o;
    return Objects.equals(this.aliases, movieExtendedRecord.aliases) &&
        Objects.equals(this.artworks, movieExtendedRecord.artworks) &&
        Objects.equals(this.audioLanguages, movieExtendedRecord.audioLanguages) &&
        Objects.equals(this.awards, movieExtendedRecord.awards) &&
        Objects.equals(this.boxOffice, movieExtendedRecord.boxOffice) &&
        Objects.equals(this.boxOfficeUS, movieExtendedRecord.boxOfficeUS) &&
        Objects.equals(this.budget, movieExtendedRecord.budget) &&
        Objects.equals(this.characters, movieExtendedRecord.characters) &&
        Objects.equals(this.companies, movieExtendedRecord.companies) &&
        Objects.equals(this.contentRatings, movieExtendedRecord.contentRatings) &&
        Objects.equals(this.firstRelease, movieExtendedRecord.firstRelease) &&
        Objects.equals(this.genres, movieExtendedRecord.genres) &&
        Objects.equals(this.id, movieExtendedRecord.id) &&
        Objects.equals(this.image, movieExtendedRecord.image) &&
        Objects.equals(this.inspirations, movieExtendedRecord.inspirations) &&
        Objects.equals(this.lastUpdated, movieExtendedRecord.lastUpdated) &&
        Objects.equals(this.lists, movieExtendedRecord.lists) &&
        Objects.equals(this.name, movieExtendedRecord.name) &&
        Objects.equals(this.nameTranslations, movieExtendedRecord.nameTranslations) &&
        Objects.equals(this.originalCountry, movieExtendedRecord.originalCountry) &&
        Objects.equals(this.originalLanguage, movieExtendedRecord.originalLanguage) &&
        Objects.equals(this.overviewTranslations, movieExtendedRecord.overviewTranslations) &&
        Objects.equals(this.productionCountries, movieExtendedRecord.productionCountries) &&
        Objects.equals(this.releases, movieExtendedRecord.releases) &&
        Objects.equals(this.remoteIds, movieExtendedRecord.remoteIds) &&
        Objects.equals(this.runtime, movieExtendedRecord.runtime) &&
        Objects.equals(this.score, movieExtendedRecord.score) &&
        Objects.equals(this.slug, movieExtendedRecord.slug) &&
        Objects.equals(this.spokenLanguages, movieExtendedRecord.spokenLanguages) &&
        Objects.equals(this.status, movieExtendedRecord.status) &&
        Objects.equals(this.studios, movieExtendedRecord.studios) &&
        Objects.equals(this.subtitleLanguages, movieExtendedRecord.subtitleLanguages) &&
        Objects.equals(this.tagOptions, movieExtendedRecord.tagOptions) &&
        Objects.equals(this.trailers, movieExtendedRecord.trailers) &&
        Objects.equals(this.translations, movieExtendedRecord.translations) &&
        Objects.equals(this.year, movieExtendedRecord.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliases, artworks, audioLanguages, awards, boxOffice, boxOfficeUS, budget, characters, companies, contentRatings, firstRelease, genres, id, image, inspirations, lastUpdated, lists, name, nameTranslations, originalCountry, originalLanguage, overviewTranslations, productionCountries, releases, remoteIds, runtime, score, slug, spokenLanguages, status, studios, subtitleLanguages, tagOptions, trailers, translations, year);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MovieExtendedRecord {\n");
    
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    artworks: ").append(toIndentedString(artworks)).append("\n");
    sb.append("    audioLanguages: ").append(toIndentedString(audioLanguages)).append("\n");
    sb.append("    awards: ").append(toIndentedString(awards)).append("\n");
    sb.append("    boxOffice: ").append(toIndentedString(boxOffice)).append("\n");
    sb.append("    boxOfficeUS: ").append(toIndentedString(boxOfficeUS)).append("\n");
    sb.append("    budget: ").append(toIndentedString(budget)).append("\n");
    sb.append("    characters: ").append(toIndentedString(characters)).append("\n");
    sb.append("    companies: ").append(toIndentedString(companies)).append("\n");
    sb.append("    contentRatings: ").append(toIndentedString(contentRatings)).append("\n");
    sb.append("    firstRelease: ").append(toIndentedString(firstRelease)).append("\n");
    sb.append("    genres: ").append(toIndentedString(genres)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    inspirations: ").append(toIndentedString(inspirations)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    lists: ").append(toIndentedString(lists)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameTranslations: ").append(toIndentedString(nameTranslations)).append("\n");
    sb.append("    originalCountry: ").append(toIndentedString(originalCountry)).append("\n");
    sb.append("    originalLanguage: ").append(toIndentedString(originalLanguage)).append("\n");
    sb.append("    overviewTranslations: ").append(toIndentedString(overviewTranslations)).append("\n");
    sb.append("    productionCountries: ").append(toIndentedString(productionCountries)).append("\n");
    sb.append("    releases: ").append(toIndentedString(releases)).append("\n");
    sb.append("    remoteIds: ").append(toIndentedString(remoteIds)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    spokenLanguages: ").append(toIndentedString(spokenLanguages)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    studios: ").append(toIndentedString(studios)).append("\n");
    sb.append("    subtitleLanguages: ").append(toIndentedString(subtitleLanguages)).append("\n");
    sb.append("    tagOptions: ").append(toIndentedString(tagOptions)).append("\n");
    sb.append("    trailers: ").append(toIndentedString(trailers)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
