/*
 * TVDB API V4
 * Documentation of [TheTVDB](https://thetvdb.com/) API V4. All related information is linked from our [Github repo](https://github.com/thetvdb/v4-api). You might also want to use our [Postman collection] (https://www.getpostman.com/collections/7a9397ce69ff246f74d0) ## Authentication 1. Use the /login endpoint and provide your API key as \"apikey\". If you have a user-supported key, also provide your subscriber PIN as \"pin\". Otherwise completely remove \"pin\" from your call. 2. Executing this call will provide you with a bearer token, which is valid for 1 month. 3. Provide your bearer token for subsequent API calls by clicking Authorize below or including in the header of all direct API calls: `Authorization: Bearer [your-token]`  ## Notes 1. \"score\" is a field across almost all entities.  We generate scores for different types of entities in various ways, so no assumptions should be made about the meaning of this value.  It is simply used to hint at relative popularity for sorting purposes. 
 *
 * OpenAPI spec version: 4.7.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amilesend.tvdb.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.amilesend.tvdb.client.model.Alias;
import com.amilesend.tvdb.client.model.AwardBaseRecord;
import com.amilesend.tvdb.client.model.Biography;
import com.amilesend.tvdb.client.model.Character;
import com.amilesend.tvdb.client.model.Race;
import com.amilesend.tvdb.client.model.RemoteID;
import com.amilesend.tvdb.client.model.TagOption;
import com.amilesend.tvdb.client.model.TranslationExtended;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * extended people record
 */
@Schema(description = "extended people record")


public class PeopleExtendedRecord {
  @SerializedName("aliases")
  private List<Alias> aliases = null;

  @SerializedName("awards")
  private List<AwardBaseRecord> awards = null;

  @SerializedName("biographies")
  private List<Biography> biographies = null;

  @SerializedName("birth")
  private String birth = null;

  @SerializedName("birthPlace")
  private String birthPlace = null;

  @SerializedName("characters")
  private List<Character> characters = null;

  @SerializedName("death")
  private String death = null;

  @SerializedName("gender")
  private Integer gender = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("image")
  private String image = null;

  @SerializedName("lastUpdated")
  private String lastUpdated = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("nameTranslations")
  private List<String> nameTranslations = null;

  @SerializedName("overviewTranslations")
  private List<String> overviewTranslations = null;

  @SerializedName("races")
  private List<Race> races = null;

  @SerializedName("remoteIds")
  private List<RemoteID> remoteIds = null;

  @SerializedName("score")
  private Long score = null;

  @SerializedName("slug")
  private String slug = null;

  @SerializedName("tagOptions")
  private List<TagOption> tagOptions = null;

  @SerializedName("translations")
  private TranslationExtended translations = null;

  public PeopleExtendedRecord aliases(List<Alias> aliases) {
    this.aliases = aliases;
    return this;
  }

  public PeopleExtendedRecord addAliasesItem(Alias aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<Alias>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

   /**
   * Get aliases
   * @return aliases
  **/
  @Schema(description = "")
  public List<Alias> getAliases() {
    return aliases;
  }

  public void setAliases(List<Alias> aliases) {
    this.aliases = aliases;
  }

  public PeopleExtendedRecord awards(List<AwardBaseRecord> awards) {
    this.awards = awards;
    return this;
  }

  public PeopleExtendedRecord addAwardsItem(AwardBaseRecord awardsItem) {
    if (this.awards == null) {
      this.awards = new ArrayList<AwardBaseRecord>();
    }
    this.awards.add(awardsItem);
    return this;
  }

   /**
   * Get awards
   * @return awards
  **/
  @Schema(description = "")
  public List<AwardBaseRecord> getAwards() {
    return awards;
  }

  public void setAwards(List<AwardBaseRecord> awards) {
    this.awards = awards;
  }

  public PeopleExtendedRecord biographies(List<Biography> biographies) {
    this.biographies = biographies;
    return this;
  }

  public PeopleExtendedRecord addBiographiesItem(Biography biographiesItem) {
    if (this.biographies == null) {
      this.biographies = new ArrayList<Biography>();
    }
    this.biographies.add(biographiesItem);
    return this;
  }

   /**
   * Get biographies
   * @return biographies
  **/
  @Schema(description = "")
  public List<Biography> getBiographies() {
    return biographies;
  }

  public void setBiographies(List<Biography> biographies) {
    this.biographies = biographies;
  }

  public PeopleExtendedRecord birth(String birth) {
    this.birth = birth;
    return this;
  }

   /**
   * Get birth
   * @return birth
  **/
  @Schema(description = "")
  public String getBirth() {
    return birth;
  }

  public void setBirth(String birth) {
    this.birth = birth;
  }

  public PeopleExtendedRecord birthPlace(String birthPlace) {
    this.birthPlace = birthPlace;
    return this;
  }

   /**
   * Get birthPlace
   * @return birthPlace
  **/
  @Schema(description = "")
  public String getBirthPlace() {
    return birthPlace;
  }

  public void setBirthPlace(String birthPlace) {
    this.birthPlace = birthPlace;
  }

  public PeopleExtendedRecord characters(List<Character> characters) {
    this.characters = characters;
    return this;
  }

  public PeopleExtendedRecord addCharactersItem(Character charactersItem) {
    if (this.characters == null) {
      this.characters = new ArrayList<Character>();
    }
    this.characters.add(charactersItem);
    return this;
  }

   /**
   * Get characters
   * @return characters
  **/
  @Schema(description = "")
  public List<Character> getCharacters() {
    return characters;
  }

  public void setCharacters(List<Character> characters) {
    this.characters = characters;
  }

  public PeopleExtendedRecord death(String death) {
    this.death = death;
    return this;
  }

   /**
   * Get death
   * @return death
  **/
  @Schema(description = "")
  public String getDeath() {
    return death;
  }

  public void setDeath(String death) {
    this.death = death;
  }

  public PeopleExtendedRecord gender(Integer gender) {
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @Schema(description = "")
  public Integer getGender() {
    return gender;
  }

  public void setGender(Integer gender) {
    this.gender = gender;
  }

  public PeopleExtendedRecord id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public PeopleExtendedRecord image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @Schema(description = "")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public PeopleExtendedRecord lastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @Schema(description = "")
  public String getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }

  public PeopleExtendedRecord name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PeopleExtendedRecord nameTranslations(List<String> nameTranslations) {
    this.nameTranslations = nameTranslations;
    return this;
  }

  public PeopleExtendedRecord addNameTranslationsItem(String nameTranslationsItem) {
    if (this.nameTranslations == null) {
      this.nameTranslations = new ArrayList<String>();
    }
    this.nameTranslations.add(nameTranslationsItem);
    return this;
  }

   /**
   * Get nameTranslations
   * @return nameTranslations
  **/
  @Schema(description = "")
  public List<String> getNameTranslations() {
    return nameTranslations;
  }

  public void setNameTranslations(List<String> nameTranslations) {
    this.nameTranslations = nameTranslations;
  }

  public PeopleExtendedRecord overviewTranslations(List<String> overviewTranslations) {
    this.overviewTranslations = overviewTranslations;
    return this;
  }

  public PeopleExtendedRecord addOverviewTranslationsItem(String overviewTranslationsItem) {
    if (this.overviewTranslations == null) {
      this.overviewTranslations = new ArrayList<String>();
    }
    this.overviewTranslations.add(overviewTranslationsItem);
    return this;
  }

   /**
   * Get overviewTranslations
   * @return overviewTranslations
  **/
  @Schema(description = "")
  public List<String> getOverviewTranslations() {
    return overviewTranslations;
  }

  public void setOverviewTranslations(List<String> overviewTranslations) {
    this.overviewTranslations = overviewTranslations;
  }

  public PeopleExtendedRecord races(List<Race> races) {
    this.races = races;
    return this;
  }

  public PeopleExtendedRecord addRacesItem(Race racesItem) {
    if (this.races == null) {
      this.races = new ArrayList<Race>();
    }
    this.races.add(racesItem);
    return this;
  }

   /**
   * Get races
   * @return races
  **/
  @Schema(description = "")
  public List<Race> getRaces() {
    return races;
  }

  public void setRaces(List<Race> races) {
    this.races = races;
  }

  public PeopleExtendedRecord remoteIds(List<RemoteID> remoteIds) {
    this.remoteIds = remoteIds;
    return this;
  }

  public PeopleExtendedRecord addRemoteIdsItem(RemoteID remoteIdsItem) {
    if (this.remoteIds == null) {
      this.remoteIds = new ArrayList<RemoteID>();
    }
    this.remoteIds.add(remoteIdsItem);
    return this;
  }

   /**
   * Get remoteIds
   * @return remoteIds
  **/
  @Schema(description = "")
  public List<RemoteID> getRemoteIds() {
    return remoteIds;
  }

  public void setRemoteIds(List<RemoteID> remoteIds) {
    this.remoteIds = remoteIds;
  }

  public PeopleExtendedRecord score(Long score) {
    this.score = score;
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @Schema(description = "")
  public Long getScore() {
    return score;
  }

  public void setScore(Long score) {
    this.score = score;
  }

  public PeopleExtendedRecord slug(String slug) {
    this.slug = slug;
    return this;
  }

   /**
   * Get slug
   * @return slug
  **/
  @Schema(description = "")
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }

  public PeopleExtendedRecord tagOptions(List<TagOption> tagOptions) {
    this.tagOptions = tagOptions;
    return this;
  }

  public PeopleExtendedRecord addTagOptionsItem(TagOption tagOptionsItem) {
    if (this.tagOptions == null) {
      this.tagOptions = new ArrayList<TagOption>();
    }
    this.tagOptions.add(tagOptionsItem);
    return this;
  }

   /**
   * Get tagOptions
   * @return tagOptions
  **/
  @Schema(description = "")
  public List<TagOption> getTagOptions() {
    return tagOptions;
  }

  public void setTagOptions(List<TagOption> tagOptions) {
    this.tagOptions = tagOptions;
  }

  public PeopleExtendedRecord translations(TranslationExtended translations) {
    this.translations = translations;
    return this;
  }

   /**
   * Get translations
   * @return translations
  **/
  @Schema(description = "")
  public TranslationExtended getTranslations() {
    return translations;
  }

  public void setTranslations(TranslationExtended translations) {
    this.translations = translations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeopleExtendedRecord peopleExtendedRecord = (PeopleExtendedRecord) o;
    return Objects.equals(this.aliases, peopleExtendedRecord.aliases) &&
        Objects.equals(this.awards, peopleExtendedRecord.awards) &&
        Objects.equals(this.biographies, peopleExtendedRecord.biographies) &&
        Objects.equals(this.birth, peopleExtendedRecord.birth) &&
        Objects.equals(this.birthPlace, peopleExtendedRecord.birthPlace) &&
        Objects.equals(this.characters, peopleExtendedRecord.characters) &&
        Objects.equals(this.death, peopleExtendedRecord.death) &&
        Objects.equals(this.gender, peopleExtendedRecord.gender) &&
        Objects.equals(this.id, peopleExtendedRecord.id) &&
        Objects.equals(this.image, peopleExtendedRecord.image) &&
        Objects.equals(this.lastUpdated, peopleExtendedRecord.lastUpdated) &&
        Objects.equals(this.name, peopleExtendedRecord.name) &&
        Objects.equals(this.nameTranslations, peopleExtendedRecord.nameTranslations) &&
        Objects.equals(this.overviewTranslations, peopleExtendedRecord.overviewTranslations) &&
        Objects.equals(this.races, peopleExtendedRecord.races) &&
        Objects.equals(this.remoteIds, peopleExtendedRecord.remoteIds) &&
        Objects.equals(this.score, peopleExtendedRecord.score) &&
        Objects.equals(this.slug, peopleExtendedRecord.slug) &&
        Objects.equals(this.tagOptions, peopleExtendedRecord.tagOptions) &&
        Objects.equals(this.translations, peopleExtendedRecord.translations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliases, awards, biographies, birth, birthPlace, characters, death, gender, id, image, lastUpdated, name, nameTranslations, overviewTranslations, races, remoteIds, score, slug, tagOptions, translations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeopleExtendedRecord {\n");
    
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    awards: ").append(toIndentedString(awards)).append("\n");
    sb.append("    biographies: ").append(toIndentedString(biographies)).append("\n");
    sb.append("    birth: ").append(toIndentedString(birth)).append("\n");
    sb.append("    birthPlace: ").append(toIndentedString(birthPlace)).append("\n");
    sb.append("    characters: ").append(toIndentedString(characters)).append("\n");
    sb.append("    death: ").append(toIndentedString(death)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameTranslations: ").append(toIndentedString(nameTranslations)).append("\n");
    sb.append("    overviewTranslations: ").append(toIndentedString(overviewTranslations)).append("\n");
    sb.append("    races: ").append(toIndentedString(races)).append("\n");
    sb.append("    remoteIds: ").append(toIndentedString(remoteIds)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    tagOptions: ").append(toIndentedString(tagOptions)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
