/*
 * TVDB API V4
 * Documentation of [TheTVDB](https://thetvdb.com/) API V4. All related information is linked from our [Github repo](https://github.com/thetvdb/v4-api). You might also want to use our [Postman collection] (https://www.getpostman.com/collections/7a9397ce69ff246f74d0) ## Authentication 1. Use the /login endpoint and provide your API key as \"apikey\". If you have a user-supported key, also provide your subscriber PIN as \"pin\". Otherwise completely remove \"pin\" from your call. 2. Executing this call will provide you with a bearer token, which is valid for 1 month. 3. Provide your bearer token for subsequent API calls by clicking Authorize below or including in the header of all direct API calls: `Authorization: Bearer [your-token]`  ## Notes 1. \"score\" is a field across almost all entities.  We generate scores for different types of entities in various ways, so no assumptions should be made about the meaning of this value.  It is simply used to hint at relative popularity for sorting purposes. 
 *
 * OpenAPI spec version: 4.7.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.amilesend.tvdb.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * User favorites record
 */
@Schema(description = "User favorites record")


public class Favorites {
  @SerializedName("series")
  private List<Integer> series = null;

  @SerializedName("movies")
  private List<Integer> movies = null;

  @SerializedName("episodes")
  private List<Integer> episodes = null;

  @SerializedName("artwork")
  private List<Integer> artwork = null;

  @SerializedName("people")
  private List<Integer> people = null;

  @SerializedName("lists")
  private List<Integer> lists = null;

  public Favorites series(List<Integer> series) {
    this.series = series;
    return this;
  }

  public Favorites addSeriesItem(Integer seriesItem) {
    if (this.series == null) {
      this.series = new ArrayList<Integer>();
    }
    this.series.add(seriesItem);
    return this;
  }

   /**
   * Get series
   * @return series
  **/
  @Schema(description = "")
  public List<Integer> getSeries() {
    return series;
  }

  public void setSeries(List<Integer> series) {
    this.series = series;
  }

  public Favorites movies(List<Integer> movies) {
    this.movies = movies;
    return this;
  }

  public Favorites addMoviesItem(Integer moviesItem) {
    if (this.movies == null) {
      this.movies = new ArrayList<Integer>();
    }
    this.movies.add(moviesItem);
    return this;
  }

   /**
   * Get movies
   * @return movies
  **/
  @Schema(description = "")
  public List<Integer> getMovies() {
    return movies;
  }

  public void setMovies(List<Integer> movies) {
    this.movies = movies;
  }

  public Favorites episodes(List<Integer> episodes) {
    this.episodes = episodes;
    return this;
  }

  public Favorites addEpisodesItem(Integer episodesItem) {
    if (this.episodes == null) {
      this.episodes = new ArrayList<Integer>();
    }
    this.episodes.add(episodesItem);
    return this;
  }

   /**
   * Get episodes
   * @return episodes
  **/
  @Schema(description = "")
  public List<Integer> getEpisodes() {
    return episodes;
  }

  public void setEpisodes(List<Integer> episodes) {
    this.episodes = episodes;
  }

  public Favorites artwork(List<Integer> artwork) {
    this.artwork = artwork;
    return this;
  }

  public Favorites addArtworkItem(Integer artworkItem) {
    if (this.artwork == null) {
      this.artwork = new ArrayList<Integer>();
    }
    this.artwork.add(artworkItem);
    return this;
  }

   /**
   * Get artwork
   * @return artwork
  **/
  @Schema(description = "")
  public List<Integer> getArtwork() {
    return artwork;
  }

  public void setArtwork(List<Integer> artwork) {
    this.artwork = artwork;
  }

  public Favorites people(List<Integer> people) {
    this.people = people;
    return this;
  }

  public Favorites addPeopleItem(Integer peopleItem) {
    if (this.people == null) {
      this.people = new ArrayList<Integer>();
    }
    this.people.add(peopleItem);
    return this;
  }

   /**
   * Get people
   * @return people
  **/
  @Schema(description = "")
  public List<Integer> getPeople() {
    return people;
  }

  public void setPeople(List<Integer> people) {
    this.people = people;
  }

  public Favorites lists(List<Integer> lists) {
    this.lists = lists;
    return this;
  }

  public Favorites addListsItem(Integer listsItem) {
    if (this.lists == null) {
      this.lists = new ArrayList<Integer>();
    }
    this.lists.add(listsItem);
    return this;
  }

   /**
   * Get lists
   * @return lists
  **/
  @Schema(description = "")
  public List<Integer> getLists() {
    return lists;
  }

  public void setLists(List<Integer> lists) {
    this.lists = lists;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Favorites favorites = (Favorites) o;
    return Objects.equals(this.series, favorites.series) &&
        Objects.equals(this.movies, favorites.movies) &&
        Objects.equals(this.episodes, favorites.episodes) &&
        Objects.equals(this.artwork, favorites.artwork) &&
        Objects.equals(this.people, favorites.people) &&
        Objects.equals(this.lists, favorites.lists);
  }

  @Override
  public int hashCode() {
    return Objects.hash(series, movies, episodes, artwork, people, lists);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Favorites {\n");
    
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("    movies: ").append(toIndentedString(movies)).append("\n");
    sb.append("    episodes: ").append(toIndentedString(episodes)).append("\n");
    sb.append("    artwork: ").append(toIndentedString(artwork)).append("\n");
    sb.append("    people: ").append(toIndentedString(people)).append("\n");
    sb.append("    lists: ").append(toIndentedString(lists)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
